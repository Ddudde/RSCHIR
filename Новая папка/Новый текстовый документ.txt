1. Назовите основные признаки ООП.
2. Опишите как определить класс в PHP.
	Класс определяется с помощью ключевого слова class, за которым следует имя класса и пара фигурных скобок ({})
3. Как создать экземпляр класса в PHP.
	Для создания экземпляра класса используется директива new
4. Опишите механизм наследования в PHP.
	Наследование - это механизм объектно ориентированного программирования, который позволяет описать новый класс на основе уже существующего (родительского). Класс, который получается в результате наследования от другого, называется подклассом.
5. Опишите правила совместимости сигнатур.
6. Опишите методы и свойства Nullsafe.
	Оператор nullsafe обеспечивает функциональность, аналогичную объединению null, но также поддерживает и вызовы методов
7. Опишите понятие автоматическая загрузка классов.
	Автоматическая загрузка работает так. Где-то в начале приложения PHP вы создаете специальную функцию __autoload(). В последствии, если где-то в коде будет попытка создать объект класса, о котором ничего не известно, PHP автоматически вызовет данную функцию, передав ей в качестве параметра имя искомого класса. Вся работа функции заключается в том, чтобы найти нужный файл и подгрузить его к скрипту, тем самым загрузить сам класс. После этого PHP уже сможет создать объект данного класса.
8. Опишите конструкторы и деструкторы в PHP.
	Конструкторы представляют специальные методы, которые выполняются при создании объекта и служат для начальной инициализации его свойств. Для создания конструктора надо объявить функцию с именем __construct (с двумя подчеркиваниями впереди)
	Деструкторы служат для освобождения ресурсов, используемых программой - для освобождения открытых файлов, открытых подключений к базам данных и т.д. Деструктор объекта вызывается самим интерпретатором PHP после потери последней ссылки на данный объект в программе.
	Деструктор определяется с помощью функции __destruct (два подчеркивания впереди)
9. Опишите понятие области видимости и модификаторы доступа в PHP.
	Область видимости свойства, метода или константы (начиная c PHP 7.1.0) может быть определена путём использования следующих ключевых слов в объявлении: public, protected или private. Доступ к свойствам и методам класса, объявленным как public (общедоступный), разрешён отовсюду. Модификатор protected (защищённый) разрешает доступ самому классу, наследующим его классам и родительским классам. Модификатор private (закрытый) ограничивает область видимости так, что только класс, где объявлен сам элемент, имеет к нему доступ.
10.Опишите оператор разрешения области видимости.
	Оператор разрешения области видимости или просто "двойное двоеточие" - это лексема, позволяющая обращаться к статическим свойствам, константам и переопределённым свойствам или методам класса.
11.Опишите абстрактные классы и методы в PHP.
	PHP поддерживает определение абстрактных классов и методов. На основе абстрактного класса нельзя создавать объекты, и любой класс, содержащий хотя бы один абстрактный метод, должен быть определён как абстрактный. Методы, объявленные абстрактными, несут, по существу, лишь описательный смысл и не могут включать реализацию.
12.Опишите интерфейсы в PHP.
	Интерфейсы объектов позволяют создавать код, который указывает, какие методы должен реализовать класс, без необходимости определять, как именно они должны быть реализованы. Интерфейсы разделяют пространство имён с классами и трейтами, поэтому они не могут называться одинаково.
13.Что такое трейт и как это используется?
	Трейт - это механизм обеспечения повторного использования кода в языках с поддержкой только одиночного наследования, таких как PHP. Трейт предназначен для уменьшения некоторых ограничений одиночного наследования, позволяя разработчику повторно использовать наборы методов свободно, в нескольких независимых классах и реализованных с использованием разных архитектур построения классов. Семантика комбинации трейтов и классов определена таким образом, чтобы снизить уровень сложности, а также избежать типичных проблем, связанных с множественным наследованием и смешиванием (mixins).
14.Что такое магические методы? Приведите примеры.
	Магическими эти методы называются по той причине, что они вызываются автоматически, если вы определите один из этих методов в классе. Вам остается лишь определить, какую задачу будет выполнять метод. Лучший пример – функция __construct(), которая вызывается автоматически каждый раз при создании экземпляра объекта.
15.Что такое позднее статическое связывание?
	PHP реализует функцию, называемую позднее статическое связывание, которая может быть использована для того, чтобы получить ссылку на вызываемый класс в контексте статического наследования.
Если говорить более точно, позднее статическое связывание сохраняет имя класса указанного в последнем "неперенаправленном вызове". В случае статических вызовов это явно указанный класс (обычно слева от оператора ::); в случае не статических вызовов это класс объекта. "Перенаправленный вызов" - это статический вызов, начинающийся с self::, parent::, static::, или, если двигаться вверх по иерархии классов, forward_static_call(). Функция get_called_class() может быть использована для получения строки с именем вызванного класса, а static:: представляет её область действия.
16.Что такое ковариантность и контравариантность?
	В PHP 7.2.0 была добавлена частичная контравариантность путём устранения ограничений типа для параметров в дочернем методе. Начиная с PHP 7.4.0, добавлена полная поддержка ковариантности и контравариантности.
	Ковариантность позволяет дочернему методу возвращать более конкретный тип, чем тип возвращаемого значения его родительского метода. В то время как контравариантность позволяет типу параметра в дочернем методе быть менее специфичным, чем в родительском.
17.Опишите понятие чистой архитектуры.
	Смысл понятия в том, чтобы создавать архитектуру, которая не зависела бы от внешнего воздействия
18.Сформулируйте правило зависимостей.
	
19.Чем определяются сущности, чем они могут быть?
20.Что такое слой сценариев?
	Сценарии — это слой, где реализуются случаи использования, которые возникают из-за того, что пользователям приложения необходимо что-то «делать» с субъектами базового Домена.
21.Что такое DTO?
	Data Transfer Object (DTO) — один из шаблонов проектирования, используется для передачи данных между подсистемами приложения. Data Transfer Object, в отличие от business object или data access object не должен содержать какого-либо поведения.
22.Что является деталью в рамках чистой архитектуры?
23.Опишите принципы организации компонентов.
	Release Equivalence Principle (REP) — Принцип эквивалентности повторного использования и выпуска Единица повторного использования равна единице выпуска. принцип REP гласит, что единица повторного использования, компонент, не может быть меньше единицы выпуска.
	Принцип согласованного изменения (CCP) гласит: в один компонент должны включаться классы, изменяющиеся по одним причинам и в одно время.
	Общий принцип повторного использования (CRP) гласит: «Классы в компоненте повторно используются вместе. Если вы повторно используете один из классов в компоненте, вы повторно используете их все».
24.Опишите принципы дизайна архитектуры.
25.Опишите понятие DDD (Domain Driven Design,
предметно-ориентированное проектирование).
26.Что такое ограниченный контекст (Bounded Context)?
27.Что такое Ubiquitous Language (Единый язык)?
28.Что такое Смысловое ядро (Core domain)?
29.Что такое Предметная область (Domain)?
30.Что такое Пространство задач и пространство решений?